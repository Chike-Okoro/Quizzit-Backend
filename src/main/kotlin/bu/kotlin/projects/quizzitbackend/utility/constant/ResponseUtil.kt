package bu.kotlin.projects.quizzitbackend.utility.constant

import bu.kotlin.projects.quizzitbackend.model.response.BaseResponse

data class ResponseUtil(
    val SUCCESS: BaseResponse = BaseResponse("00", "Completed successfully"),
    val REFER_TO_CARD_ISSUER: BaseResponse = BaseResponse("01", "Refer to card issuer"),
    val REFER_TO_CARD_ISSUERS_SPECIAL_CONDITIONS: BaseResponse = BaseResponse("02", "Refer to card issuer's special conditions"),
    val INVALID_MERCHANT: BaseResponse = BaseResponse("03", "Invalid merchant"),
    val PICK_UP: BaseResponse = BaseResponse("04", "Pick-up"),
    val DO_NOT_HONOR: BaseResponse = BaseResponse("05", "Do not honor"),
//    val ERROR: BaseResponse = BaseResponse("06", "Error"),
    val PICK_UP_CARD_SPECIAL_CONDITION: BaseResponse = BaseResponse("07", "Pick-up card, special condition"),
    val HONOUR_WITH_IDENTIFICATION: BaseResponse = BaseResponse("08", "Honour with identification"),
    val REQUEST_IN_PROGRESS: BaseResponse = BaseResponse("09", "Request in progress"),
    val APPROVED_FOR_PARTIAL_AMOUNT: BaseResponse = BaseResponse("10", "Approved for partial amount"),
    val APPROVED_VIP: BaseResponse = BaseResponse("11", "Approved (VIP)"),
    val INVALID_TRANSACTION: BaseResponse = BaseResponse("12", "Invalid transaction"),
    val INVALID_AMOUNT: BaseResponse = BaseResponse("13", "Invalid amount"),
    val INVALID_CARD_NUMBER_NO_SUCH_NUMBER: BaseResponse = BaseResponse("14", "Invalid card number (no such number)"),
    val NO_SUCH_ISSUER: BaseResponse = BaseResponse("15", "No such issuer"),
    val APPROVED_UPDATE_TRACK_3: BaseResponse = BaseResponse("16", "Approved, update track 3"),
    val CUSTOMER_CANCELLATION: BaseResponse = BaseResponse("17", "Customer cancellation"),
    val CUSTOMER_DISPUTE: BaseResponse = BaseResponse("18", "Customer dispute"),
    val RE_ENTER_TRANSACTION: BaseResponse = BaseResponse("19", "Re-enter transaction"),
    val INVALID_RESPONSE: BaseResponse = BaseResponse("20", "Invalid response"),
    val NO_ACTION_TAKEN: BaseResponse = BaseResponse("21", "No action taken"),
    val SUSPECTED_MALFUNCTION: BaseResponse = BaseResponse("22", "Suspected malfunction"),
    val UNACCEPTABLE_TRANSACTION_FEE: BaseResponse = BaseResponse("23", "Unacceptable transaction fee"),
    val FILE_UPDATE_NOT_SUPPORTED_BY_RECEIVER: BaseResponse = BaseResponse("24", "File update not supported by receiver"),
    val UNABLE_TO_LOCATE_RECORD: BaseResponse = BaseResponse("25", "Unable to locate record"),
    val DUPLICATE_RECORD: BaseResponse = BaseResponse("26", "Duplicate record"),
    val FILE_UPDATE_FIELD_EDIT_ERROR: BaseResponse = BaseResponse("27", "File update field edit error"),
    val FILE_UPDATE_FILE_LOCKED_OUT: BaseResponse = BaseResponse("28", "File update file locked out"),
    val FILE_UPDATE_NOT_SUCCESSFUL_CONTACT_ACQUIRER: BaseResponse = BaseResponse("29", "File update not successful, contact acquirer"),
    val FORMAT_ERROR: BaseResponse = BaseResponse("30", "Format error"),
    val BANK_NOT_SUPPORTED_BY_SWITCH: BaseResponse = BaseResponse("31", "Bank not supported by switch"),
    val COMPLETED_PARTIALLY: BaseResponse = BaseResponse("32", "Completed partially"),
    val EXPIRED_CARD: BaseResponse = BaseResponse("33", "Expired card"),
    val SUSPECTED_FRAUD: BaseResponse = BaseResponse("34", "Suspected fraud"),
    val CARD_ACCEPTOR_CONTACT_ACQUIRER: BaseResponse = BaseResponse("35", "Card acceptor contact acquirer"),
    val RESTRICTED_CARD: BaseResponse = BaseResponse("36", "Restricted card"),
    val CARD_ACCEPTOR_CALL_ACQUIRER_SECURITY: BaseResponse = BaseResponse("37", "Card acceptor call acquirer security"),
    val ALLOWABLE_PIN_TRIES_EXCEEDED: BaseResponse = BaseResponse("38", "Allowable PIN tries exceeded"),
    val NO_CREDIT_ACCOUNT: BaseResponse = BaseResponse("39", "No credit account"),
    val REQUESTED_FUNCTION_NOT_SUPPORTED: BaseResponse = BaseResponse("40", "Requested function not supported"),
    val LOST_CARD: BaseResponse = BaseResponse("41", "Lost card"),
    val NO_UNIVERSAL_ACCOUNT: BaseResponse = BaseResponse("42", "No universal account"),
    val STOLEN_CARD_PICK_UP: BaseResponse = BaseResponse("43", "Stolen card, pick-up"),
    val NO_INVESTMENT_ACCOUNT: BaseResponse = BaseResponse("44", "No investment account"),
//    val RESERVED_FOR_ISO_USE: BaseResponse = BaseResponse("45-50", "Reserved for ISO use"),
    val NOT_SUFFICIENT_FUNDS: BaseResponse = BaseResponse("51", "Not sufficient funds"),
    val NO_CHECKING_ACCOUNT: BaseResponse = BaseResponse("52", "No checking account"),
    val NO_SAVINGS_ACCOUNT: BaseResponse = BaseResponse("53", "No savings account"),
//    val EXPIRED_CARD: BaseResponse = BaseResponse("54", "Expired card"),
    val INCORRECT_PERSONAL_IDENTIFICATION_NUMBER: BaseResponse = BaseResponse("55", "Incorrect personal identification number"),
    val NO_CARD_RECORD: BaseResponse = BaseResponse("56", "No card record"),
    val TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER: BaseResponse = BaseResponse("57", "Transaction not permitted to cardholder"),
    val TRANSACTION_NOT_PERMITTED_TO_TERMINAL: BaseResponse = BaseResponse("58", "Transaction not permitted to terminal"),
//    val SUSPECTED_FRAUD: BaseResponse = BaseResponse("59", "Suspected fraud"),
//    val CARD_ACCEPTOR_CONTACT_ACQUIRER: BaseResponse = BaseResponse("60", "Card acceptor contact acquirer"),
    val EXCEEDS_WITHDRAWAL_AMOUNT_LIMIT: BaseResponse = BaseResponse("61", "Exceeds withdrawal amount limit"),
//    val RESTRICTED_CARD: BaseResponse = BaseResponse("62", "Restricted card"),
    val SECURITY_VIOLATION: BaseResponse = BaseResponse("63", "Security violation"),
    val ORIGINAL_AMOUNT_INCORRECT: BaseResponse = BaseResponse("64", "Original amount incorrect"),
    val EXCEEDS_WITHDRAWAL_FREQUENCY_LIMIT: BaseResponse = BaseResponse("65", "Exceeds withdrawal frequency limit"),
    val CARD_ACCEPTOR_CALL_ACQUIRERS_SECURITY_DEPARTMENT: BaseResponse = BaseResponse("66", "Card acceptor call acquirer's security department"),
    val HARD_CAPTURE_REQUIRES_THAT_CARD_BE_PICKED_UP_AT_ATM: BaseResponse = BaseResponse("67", "Hard capture (requires that card be picked up at ATM)"),
    val RESPONSE_RECEIVED_TOO_LATE: BaseResponse = BaseResponse("68", "Response received too late"),
//    val RESERVED_FOR_ISO_USE: BaseResponse = BaseResponse("69-74", "Reserved for ISO use"),
    val ALLOWABLE_NUMBER_OF_PIN_TRIES_EXCEEDED: BaseResponse = BaseResponse("75", "Allowable number of PIN tries exceeded"),
    val INVALID_CREDIT_ACCOUNT :BaseResponse = BaseResponse("76", "Invalid Credit Account"),
    val INVALID_DEBIT_ACCOUNT :BaseResponse = BaseResponse("77", "Invalid Debit Account"),
    val INVALID_ACCOUNT :BaseResponse = BaseResponse("78", "Invalid Account"),
    val INVALID_ENTRY: BaseResponse = BaseResponse("79", "Invalid Entry"),
    val AUTHORIZATION_KEY_MUST_BE_PASSED: BaseResponse = BaseResponse("80", "Authorization Key must be passed"),
    val INVALID_ACTION: BaseResponse = BaseResponse("81", "Invalid Action"),
    val ACCOUNT_DELETED: BaseResponse = BaseResponse("82", "Your account has been deleted or suspended"),
    val ERROR_INVALID_DATE_FORMAT: BaseResponse = BaseResponse("83", "Invalid date Format"),
    val ERROR_INVALID_PATH: BaseResponse = BaseResponse("84", "Invalid Path"),
    val FAILED_TO_PERFORM_ACTION: BaseResponse = BaseResponse("85", "Failed to perform action"),
    val ERROR_INVALID_CREDENTIAL: BaseResponse = BaseResponse("86", "Invalid Credential"),
    val ERROR_ACTIVITY_ALREADY_QUEUED: BaseResponse = BaseResponse("87", "Activity Already Queued Authorized"),
    val ERROR_ACTIVITY_ALREADY_PERFORMED: BaseResponse = BaseResponse("87", "Activity Already Performed"),
    val SUCCESS_ACTIVITY_QUEUE: BaseResponse = BaseResponse("00", "Activity Queued Awaiting Authorization"),
    val FAILED_TO_CREATE_RECORD: BaseResponse = BaseResponse("88", "Failed to create record"),
    val FAILED_TO_UPDATE_RECORD: BaseResponse = BaseResponse("89", "Failed to update record"),
    val CUTOFF_IS_IN_PROCESS: BaseResponse = BaseResponse("90", "Cutoff is in process"),
    val TRANSACTION_CAN_BE_SENT_AGAIN_IN_A_FEW_MINUTES: BaseResponse = BaseResponse("", "(switch ending a day's business and starting the next. Transaction can be sent again in a few minutes)"),
    val ISSUER_OR_SWITCH_IS_INOPERATIVE: BaseResponse = BaseResponse("91", "Issuer or switch is inoperative"),
    val FINANCIAL_INSTITUTION_OR_INTERMEDIATE_NETWORK_FACILITY_CANNOT_BE_FOUND_FOR_ROUTING: BaseResponse = BaseResponse("92", "Financial institution or intermediate network facility cannot be found for routing"),
    val TRANSACTION_CANNOT_BE_COMPLETED_VIOLATION_OF_LAW: BaseResponse = BaseResponse("93", "Transaction cannot be completed. Violation of law"),
    val DUPLICATE_TRANSMISSION: BaseResponse = BaseResponse("94", "Duplicate transmission"),
    val RECONCILE_ERROR: BaseResponse = BaseResponse("95", "Reconcile error"),
    val SYSTEM_MALFUNCTION: BaseResponse = BaseResponse("96", "System malfunction"),
    val SUCCESS_UPLOAD_SUBMITTED: BaseResponse = BaseResponse("97", "Failed to upload records."),
    val ERROR_NO_PENDING_ENTRIES: BaseResponse = BaseResponse("98", "No Pending Entries."),
    val ERROR_INVALID_BANK_CODE: BaseResponse = BaseResponse("99", "Invalid Bank Code"),
    val ERROR_AUTHENTICATION_FAILED: BaseResponse = BaseResponse("100", "Authentication Failed"),
    val ERROR_FAILED_TO_GENERATE_OTP: BaseResponse = BaseResponse("101", "Failed to generate OTP"),
    val ERROR_INVALID_TYPE: BaseResponse = BaseResponse("102", "Invalid Type"),
    val ERROR_INVALID_INTEREST_RATE :BaseResponse = BaseResponse("103", "Invalid interest Rate"),
    val ERROR_INVALID_CHECKER_ID: BaseResponse = BaseResponse("104", "Invalid Checker ID"),
    val SUCCESS_OTP_SENT: BaseResponse = BaseResponse("00", "OTP is sent to your email for authorization"),
    val ERROR_OTP_IS_REQUIRED: BaseResponse = BaseResponse("105", "OTP is Required"),
    val BAD_REQUEST: BaseResponse = BaseResponse("106", "Bad Request"),
    val ACCESS_GRANTED: BaseResponse = BaseResponse("00", "Access Granted"),
    val ACCESS_DENIED: BaseResponse = BaseResponse("107", "Access Denied"),
    val ERROR_BANK_CODE_NOT_FOUND: BaseResponse = BaseResponse("108", "Bank Code not Found"),
    val ERROR_INVALID_USERNAME: BaseResponse = BaseResponse("109", "Invalid Username"),
    val ERROR_INCORRECT_OLD_PASSWORD :BaseResponse = BaseResponse("110", "Incorrect Old Password"),
    val ERROR_PASSWORD_MISMATCH: BaseResponse = BaseResponse("111", "Password mismatch"),
    val ERROR_TOKEN_EXPIRED: BaseResponse = BaseResponse("112", "Token Expired"),
    val ERROR_UNAUTHORIZED_TOKEN: BaseResponse = BaseResponse("113", "Unauthorized Token"),
    val ERROR_AUTHORIZATION_TOKEN_MISSING: BaseResponse = BaseResponse("114", "Authorization Token Missing"),
    val ERROR_INVALID_AUTHORIZATION_TOKEN :BaseResponse = BaseResponse("115", "Invalid Authorization Token"),
    val INVALID_TOKEN :BaseResponse = BaseResponse("116", "Invalid Authorization Token"),
    val RECORD_ALREADY_EXISTS: BaseResponse = BaseResponse("117", "Record already exists"),
    val RESERVED_FOR_PRIVATE_USE: BaseResponse = BaseResponse("N Zero-ZZ", "Reserved for private use"),
    val ERROR: BaseResponse = BaseResponse("99", "Something Went Wrong")
)
